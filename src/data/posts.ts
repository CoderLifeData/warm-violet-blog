
export interface Author {
  id: string;
  name: string;
  avatar: string;
}

export interface Post {
  id: string;
  title: string;
  excerpt: string;
  content: string;
  date: string;
  category: string;
  coverImage?: string;
  author: Author;
  likes: number;
  comments: number;
}

export const author: Author = {
  id: 'author-1',
  name: 'Иван Иванов',
  avatar: 'https://images.unsplash.com/photo-1535713875002-d1d0cf377fde?ixlib=rb-1.2.1&auto=format&fit=crop&w=256&q=80'
};

export const posts: Post[] = [
  {
    id: 'post-1',
    title: 'Дизайн в современной веб-разработке',
    excerpt: 'Исследование современных трендов дизайна в веб-разработке и их влияние на пользовательский опыт.',
    content: `
      <p>Современный веб-дизайн продолжает эволюционировать с невероятной скоростью. Минимализм, микро-взаимодействия и иммерсивный опыт — вот лишь некоторые из трендов, определяющих текущее направление развития.</p>
      
      <h2>Минимализм и функциональность</h2>
      <p>Минималистичный дизайн продолжает доминировать в вебе. Меньше отвлекающих элементов, больше внимания на контент и функциональность. Это не просто эстетический выбор, но и практический подход к созданию более быстрых и доступных веб-сайтов.</p>
      
      <h2>Микро-взаимодействия</h2>
      <p>Небольшие, но значимые анимации и взаимодействия улучшают пользовательский опыт, делая интерфейсы более интуитивными и отзывчивыми. Правильно реализованные микро-взаимодействия могут значительно повысить вовлеченность пользователей.</p>
      
      <h2>Неоморфизм и глассморфизм</h2>
      <p>Новые подходы к визуальному дизайну, такие как неоморфизм и глассморфизм, привносят свежий взгляд на то, как могут выглядеть пользовательские интерфейсы. Эти стили создают объемные, тактильные ощущения даже на плоских экранах.</p>
      
      <h2>Заключение</h2>
      <p>Веб-дизайн продолжает быть динамичной и быстро развивающейся областью. Лучшие дизайнеры и разработчики понимают, что эстетика должна идти рука об руку с функциональностью, доступностью и производительностью.</p>
    `,
    date: '2023-05-15',
    category: 'Дизайн',
    coverImage: 'https://images.unsplash.com/photo-1561070791-2526d30994b5?ixlib=rb-1.2.1&auto=format&fit=crop&w=800&q=80',
    author,
    likes: 24,
    comments: 5
  },
  {
    id: 'post-2',
    title: 'Основы TypeScript для React-разработчиков',
    excerpt: 'Практическое руководство по использованию TypeScript в проектах React для улучшения кодовой базы.',
    content: `
      <p>TypeScript стал неотъемлемой частью современной разработки React-приложений. В этой статье мы рассмотрим основные концепции и практики.</p>
      
      <h2>Почему TypeScript?</h2>
      <p>TypeScript добавляет статическую типизацию в JavaScript, что позволяет обнаруживать ошибки на этапе компиляции, а не во время выполнения. Это особенно ценно в больших проектах с множеством разработчиков.</p>
      
      <h2>Типизация пропсов в компонентах</h2>
      <p>Одно из самых больших преимуществ TypeScript в React — возможность типизации пропсов. Например:</p>
      <pre><code>
      interface ButtonProps {
        text: string;
        onClick: () => void;
        variant?: 'primary' | 'secondary';
      }
      
      const Button: React.FC&lt;ButtonProps&gt; = ({ text, onClick, variant = 'primary' }) => {
        return (
          &lt;button 
            className={\`btn btn-\${variant}\`} 
            onClick={onClick}
          &gt;
            {text}
          &lt;/button&gt;
        );
      };
      </code></pre>
      
      <h2>Типизация состояния</h2>
      <p>TypeScript также позволяет типизировать состояние компонентов, что делает код более предсказуемым:</p>
      <pre><code>
      interface State {
        count: number;
        loading: boolean;
      }
      
      const [state, setState] = useState&lt;State&gt;({
        count: 0,
        loading: false
      });
      </code></pre>
      
      <h2>Заключение</h2>
      <p>Инвестирование времени в изучение TypeScript существенно окупается в средних и крупных React-проектах. Это не только улучшает документацию кода, но и значительно сокращает количество потенциальных ошибок.</p>
    `,
    date: '2023-06-10',
    category: 'Разработка',
    coverImage: 'https://images.unsplash.com/photo-1552308995-2baac1ad5490?ixlib=rb-1.2.1&auto=format&fit=crop&w=800&q=80',
    author,
    likes: 36,
    comments: 8
  },
  {
    id: 'post-3',
    title: 'Оптимизация производительности React приложений',
    excerpt: 'Практические советы по улучшению производительности современных React-приложений.',
    content: `
      <p>Производительность является критическим аспектом пользовательского опыта. В этой статье мы рассмотрим основные техники оптимизации React-приложений.</p>
      
      <h2>Мемоизация компонентов</h2>
      <p>React предоставляет несколько API для мемоизации: React.memo для функциональных компонентов, useMemo для вычисляемых значений и useCallback для функций.</p>
      <pre><code>
      const MemoizedComponent = React.memo(({ value }) => {
        return &lt;div&gt;{value}&lt;/div&gt;;
      });
      
      // Внутри функционального компонента
      const cachedValue = useMemo(() => computeExpensiveValue(a, b), [a, b]);
      const cachedCallback = useCallback(() => doSomething(a, b), [a, b]);
      </code></pre>
      
      <h2>Виртуализация списков</h2>
      <p>Для отображения длинных списков стоит использовать виртуализацию с помощью библиотек вроде react-window или react-virtualized:</p>
      <pre><code>
      import { FixedSizeList } from 'react-window';
      
      const Row = ({ index, style }) => (
        &lt;div style={style}&gt;Item {index}&lt;/div&gt;
      );
      
      const VirtualizedList = () => (
        &lt;FixedSizeList
          height={400}
          width={300}
          itemCount={1000}
          itemSize={35}
        &gt;
          {Row}
        &lt;/FixedSizeList&gt;
      );
      </code></pre>
      
      <h2>Ленивая загрузка</h2>
      <p>Используйте React.lazy и Suspense для разделения кода и ленивой загрузки компонентов:</p>
      <pre><code>
      const LazyComponent = React.lazy(() => import('./LazyComponent'));
      
      function App() {
        return (
          &lt;Suspense fallback={&lt;div&gt;Loading...&lt;/div&gt;}&gt;
            &lt;LazyComponent /&gt;
          &lt;/Suspense&gt;
        );
      }
      </code></pre>
      
      <h2>Заключение</h2>
      <p>Оптимизация производительности — это непрерывный процесс. Важно не только применять эти техники, но и измерять их влияние на реальную производительность приложения.</p>
    `,
    date: '2023-07-25',
    category: 'Производительность',
    coverImage: 'https://images.unsplash.com/photo-1518091943855-3c485885236e?ixlib=rb-1.2.1&auto=format&fit=crop&w=800&q=80',
    author,
    likes: 42,
    comments: 12
  },
  {
    id: 'post-4',
    title: 'Доступность в современном вебе',
    excerpt: 'Почему доступность важна и как сделать ваши веб-приложения доступными для всех пользователей.',
    content: `
      <p>Веб-доступность (web accessibility, a11y) — это практика создания веб-сайтов, которыми могут пользоваться все люди, включая пользователей с ограниченными возможностями.</p>
      
      <h2>Почему доступность важна?</h2>
      <p>Согласно статистике, около 15% населения мира имеет ту или иную форму инвалидности. Создавая доступные веб-сайты, мы не только следуем этическим принципам, но и расширяем аудиторию, а в некоторых странах также выполняем законодательные требования.</p>
      
      <h2>Основные принципы доступности</h2>
      <p>Вот несколько ключевых принципов, которые стоит учитывать:</p>
      <ul>
        <li>Семантическая HTML-разметка</li>
        <li>Достаточный контраст текста</li>
        <li>Альтернативный текст для изображений</li>
        <li>Доступная навигация с клавиатуры</li>
        <li>ARIA-атрибуты для сложных интерактивных элементов</li>
      </ul>
      
      <h2>Семантический HTML</h2>
      <p>Используйте правильные теги HTML для структурирования контента:</p>
      <pre><code>
      &lt;!-- Неправильно --&gt;
      &lt;div class="header"&gt;Заголовок&lt;/div&gt;
      
      &lt;!-- Правильно --&gt;
      &lt;h1&gt;Заголовок&lt;/h1&gt;
      </code></pre>
      
      <h2>Тестирование доступности</h2>
      <p>Используйте инструменты вроде Lighthouse, axe или WAVE для автоматической проверки доступности. Однако помните, что автоматические инструменты могут обнаружить только около 30% проблем. Необходимо также проводить ручное тестирование, включая навигацию с помощью клавиатуры и использование программ экранного доступа.</p>
      
      <h2>Заключение</h2>
      <p>Доступность — это не просто набор правил или пунктов для галочки, а фундаментальный аспект веб-разработки. Инвестиции в доступность улучшают пользовательский опыт для всех, а не только для пользователей с ограниченными возможностями.</p>
    `,
    date: '2023-08-18',
    category: 'Доступность',
    coverImage: 'https://images.unsplash.com/photo-1484627147104-f5197bcd6651?ixlib=rb-1.2.1&auto=format&fit=crop&w=800&q=80',
    author,
    likes: 19,
    comments: 4
  },
  {
    id: 'post-5',
    title: 'Архитектура современных веб-приложений',
    excerpt: 'Обзор популярных архитектурных подходов в современной веб-разработке.',
    content: `
      <p>Архитектура веб-приложения во многом определяет его масштабируемость, поддерживаемость и общее качество. В этой статье мы рассмотрим современные подходы к архитектуре.</p>
      
      <h2>Монолитная архитектура</h2>
      <p>Традиционно веб-приложения строились как монолиты, где фронтенд и бэкенд тесно связаны и развертываются вместе. Этот подход прост, но может стать проблематичным при масштабировании.</p>
      
      <h2>Микрофронтенды</h2>
      <p>По аналогии с микросервисами, микрофронтенды разбивают пользовательский интерфейс на отдельные, независимо развертываемые приложения. Этот подход позволяет разным командам работать над разными частями пользовательского интерфейса независимо.</p>
      <pre><code>
      // Пример интеграции микрофронтендов через веб-компоненты
      class ProductList extends HTMLElement {
        connectedCallback() {
          this.innerHTML = \`<div>Список продуктов</div>\`;
          // Загрузка данных, рендеринг списка и т.д.
        }
      }
      
      customElements.define('product-list', ProductList);
      </code></pre>
      
      <h2>JAMstack</h2>
      <p>JavaScript, API и разметка (Markup) — этот стек стал популярным для создания высокопроизводительных сайтов. Предварительно рендеренные статические файлы обслуживаются через CDN, а динамическая функциональность добавляется через JavaScript и API.</p>
      
      <h2>Серверный рендеринг и гидратация</h2>
      <p>Фреймворки вроде Next.js позволяют рендерить React-компоненты на сервере, что улучшает начальную загрузку и SEO, а затем "гидратировать" их на клиенте для добавления интерактивности.</p>
      
      <h2>Заключение</h2>
      <p>Не существует единого "правильного" подхода к архитектуре — выбор зависит от конкретных потребностей проекта, команды и бизнес-требований. Важно постоянно оценивать компромиссы между различными подходами.</p>
    `,
    date: '2023-09-05',
    category: 'Архитектура',
    coverImage: 'https://images.unsplash.com/photo-1486312338219-ce68d2c6f44d?ixlib=rb-1.2.1&auto=format&fit=crop&w=800&q=80',
    author,
    likes: 31,
    comments: 9
  },
  {
    id: 'post-6',
    title: 'Тренды фронтенд-разработки 2023',
    excerpt: 'Обзор актуальных тенденций в мире фронтенд-разработки в 2023 году.',
    content: `
      <p>Фронтенд-разработка продолжает стремительно эволюционировать. В этой статье мы рассмотрим ключевые тренды, которые определяют направление развития в 2023 году.</p>
      
      <h2>Веб-компоненты и композиционный UI</h2>
      <p>Веб-компоненты стандартизируют компонентный подход на уровне браузера, обеспечивая лучшую инкапсуляцию и повторное использование кода.</p>
      
      <h2>Мета-фреймворки</h2>
      <p>Решения, построенные поверх базовых фреймворков, такие как Next.js для React или Nuxt для Vue, продолжают набирать популярность благодаря встроенной поддержке серверного рендеринга, маршрутизации и оптимизации.</p>
      
      <h2>Edge Computing</h2>
      <p>Выполнение кода ближе к пользователю на edge-серверах становится все более распространенным подходом, обеспечивая лучшую производительность и снижая задержки.</p>
      
      <h2>WebAssembly (WASM)</h2>
      <p>WASM позволяет запускать код, написанный на языках вроде C, C++ и Rust, непосредственно в браузере с производительностью, близкой к нативной.</p>
      
      <h2>Автоматическая оптимизация изображений</h2>
      <p>Инструменты и фреймворки все чаще предлагают встроенные решения для оптимизации изображений, такие как автоматическая конвертация в современные форматы (WebP, AVIF) и генерация различных размеров.</p>
      
      <h2>Заключение</h2>
      <p>Фронтенд-разработка продолжает быть одной из самых динамичных областей программирования. Важно следить за новыми тенденциями, но также критически оценивать их применимость к конкретным проектам.</p>
    `,
    date: '2023-10-12',
    category: 'Тренды',
    coverImage: 'https://images.unsplash.com/photo-1581291518633-83b4ebd1d83e?ixlib=rb-1.2.1&auto=format&fit=crop&w=800&q=80',
    author,
    likes: 27,
    comments: 6
  }
];

export const getFeaturedPosts = (): Post[] => {
  return posts.slice(0, 3);
};

export const getRecentPosts = (): Post[] => {
  return [...posts].sort((a, b) => new Date(b.date).getTime() - new Date(a.date).getTime());
};

export const getPostById = (id: string): Post | undefined => {
  return posts.find(post => post.id === id);
};

export const getRelatedPosts = (currentPostId: string, category: string): Post[] => {
  return posts
    .filter(post => post.id !== currentPostId && post.category === category)
    .slice(0, 2);
};
